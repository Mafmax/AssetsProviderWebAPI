// <auto-generated />
using System;
using Mafmax.AssetsProvider.DAL.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Mafmax.AssetsProvider.DAL.Migrations
{
    [DbContext(typeof(APContext))]
    [Migration("20210926102944_AddInitialData")]
    partial class AddInitialData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Asset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("BaseCurrency");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISIN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IssuerId")
                        .HasColumnType("int");

                    b.Property<int>("LotSize")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StockId")
                        .HasColumnType("int");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IssuerId");

                    b.HasIndex("StockId");

                    b.ToTable("Assets");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Asset");
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Россия"
                        },
                        new
                        {
                            Id = 2,
                            Name = "США"
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Industry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Industries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Технологии"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Финансы"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Добыча ископаемых"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Нефть и газ"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Телекоммуникации"
                        },
                        new
                        {
                            Id = 6,
                            Name = "IT"
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Issuer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("IndustryId");

                    b.ToTable("Issuers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            IndustryId = 5,
                            Name = "МТС"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            IndustryId = 4,
                            Name = "Сургутнефтегаз"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            IndustryId = 3,
                            Name = "Алроса"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            IndustryId = 1,
                            Name = "Apple"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            IndustryId = 6,
                            Name = "Яндекс"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            IndustryId = 2,
                            Name = "Сбербанк России"
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.StockExchange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("StockExchange");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "MOEX",
                            Name = "Московская биржа"
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Bond", b =>
                {
                    b.HasBaseType("Mafmax.AssetsProvider.DAL.Entities.Asset");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ToTable("Assets");

                    b.HasDiscriminator().HasValue("Bond");

                    b.HasData(
                        new
                        {
                            Id = 8,
                            Currency = "RUB",
                            ISIN = "RU000A101C89",
                            IssuerId = 6,
                            LotSize = 1,
                            Name = "Сбербанк ПАО 001Р-SBER15",
                            StockId = 1,
                            Ticker = "RU000A101C89",
                            Type = 2
                        },
                        new
                        {
                            Id = 9,
                            Currency = "RUB",
                            ISIN = "RU000A1013J4",
                            IssuerId = 6,
                            LotSize = 1,
                            Name = "СберИОС 001Р-177R GMKN 100",
                            StockId = 1,
                            Ticker = "RU000A1013J4",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Share", b =>
                {
                    b.HasBaseType("Mafmax.AssetsProvider.DAL.Entities.Asset");

                    b.Property<bool>("IsPreffered")
                        .HasColumnType("bit");

                    b.ToTable("Assets");

                    b.HasDiscriminator().HasValue("Share");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Currency = "RUB",
                            ISIN = "RU0009029557",
                            IssuerId = 6,
                            LotSize = 10,
                            Name = "Сбербанк России, акция привелегированная",
                            StockId = 1,
                            Ticker = "SBERP",
                            IsPreffered = true
                        },
                        new
                        {
                            Id = 2,
                            Currency = "RUB",
                            ISIN = "RU0007775219",
                            IssuerId = 1,
                            LotSize = 10,
                            Name = "МТС, акция обыкновенная",
                            StockId = 1,
                            Ticker = "MTSS",
                            IsPreffered = false
                        },
                        new
                        {
                            Id = 3,
                            Currency = "RUB",
                            ISIN = "RU0008926258",
                            IssuerId = 2,
                            LotSize = 100,
                            Name = "Сургутнефтегаз, акция обыкновенная",
                            StockId = 1,
                            Ticker = "SNGS",
                            IsPreffered = false
                        },
                        new
                        {
                            Id = 4,
                            Currency = "RUB",
                            ISIN = "RU0007252813",
                            IssuerId = 3,
                            LotSize = 10,
                            Name = "Алроса, акция обыкновенная",
                            StockId = 1,
                            Ticker = "ALRS",
                            IsPreffered = false
                        },
                        new
                        {
                            Id = 5,
                            Currency = "USD",
                            ISIN = "US0378331005",
                            IssuerId = 4,
                            LotSize = 1,
                            Name = "Apple, акция обыкновенная",
                            StockId = 1,
                            Ticker = "AAPL-RM",
                            IsPreffered = false
                        },
                        new
                        {
                            Id = 6,
                            Currency = "EUR",
                            ISIN = "NL0009805522",
                            IssuerId = 5,
                            LotSize = 1,
                            Name = "ЯНДЕКС Н.В., акция обыкновенная",
                            StockId = 1,
                            Ticker = "YNDX",
                            IsPreffered = false
                        },
                        new
                        {
                            Id = 7,
                            Currency = "RUB",
                            ISIN = "RU0009029540",
                            IssuerId = 6,
                            LotSize = 10,
                            Name = "Сбербанк России, акция обыкновенная",
                            StockId = 1,
                            Ticker = "SBER",
                            IsPreffered = false
                        });
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Asset", b =>
                {
                    b.HasOne("Mafmax.AssetsProvider.DAL.Entities.Issuer", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mafmax.AssetsProvider.DAL.Entities.StockExchange", "Stock")
                        .WithMany()
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Mafmax.AssetsProvider.DAL.Entities.CirculationPeriod", "Circulation", b1 =>
                        {
                            b1.Property<int>("AssetId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<DateTime?>("End")
                                .HasColumnType("datetime2")
                                .HasColumnName("EndCirculation");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("datetime2")
                                .HasColumnName("StartCirculation");

                            b1.HasKey("AssetId");

                            b1.ToTable("Assets");

                            b1.WithOwner()
                                .HasForeignKey("AssetId");

                            b1.HasData(
                                new
                                {
                                    AssetId = 1,
                                    Start = new DateTime(2016, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 2,
                                    Start = new DateTime(2004, 2, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 3,
                                    Start = new DateTime(2005, 1, 11, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 4,
                                    Start = new DateTime(2011, 11, 29, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 5,
                                    Start = new DateTime(2020, 9, 8, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 6,
                                    Start = new DateTime(2014, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 7,
                                    Start = new DateTime(2007, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 8,
                                    Start = new DateTime(2020, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                },
                                new
                                {
                                    AssetId = 9,
                                    Start = new DateTime(2019, 6, 19, 0, 0, 0, 0, DateTimeKind.Unspecified)
                                });
                        });

                    b.Navigation("Circulation");

                    b.Navigation("Issuer");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Mafmax.AssetsProvider.DAL.Entities.Issuer", b =>
                {
                    b.HasOne("Mafmax.AssetsProvider.DAL.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Mafmax.AssetsProvider.DAL.Entities.Industry", "Industry")
                        .WithMany()
                        .HasForeignKey("IndustryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Industry");
                });
#pragma warning restore 612, 618
        }
    }
}
